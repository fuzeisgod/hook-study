[{"D:\\fuzzy work\\hooks-study\\src\\index.tsx":"1","D:\\fuzzy work\\hooks-study\\src\\app.tsx":"2","D:\\fuzzy work\\hooks-study\\src\\hooks\\index.ts":"3","D:\\fuzzy work\\hooks-study\\src\\hooks\\createMemo\\index.ts":"4","D:\\fuzzy work\\hooks-study\\src\\hooks\\useToggle\\index.ts":"5","D:\\fuzzy work\\hooks-study\\src\\hooks\\useGetset\\index.ts":"6","D:\\fuzzy work\\hooks-study\\src\\hooks\\useUpdate\\index.ts":"7","D:\\fuzzy work\\hooks-study\\src\\hooks\\useGetSet\\index.ts":"8","D:\\fuzzy work\\hooks-study\\src\\hooks\\useCounter\\index.ts":"9","D:\\fuzzy work\\hooks-study\\src\\hooks\\useList\\index.ts":"10"},{"size":160,"mtime":1611718527253,"results":"11","hashOfConfig":"12"},{"size":887,"mtime":1611904860817,"results":"13","hashOfConfig":"12"},{"size":310,"mtime":1611907154642,"results":"14","hashOfConfig":"12"},{"size":360,"mtime":1611736955175,"results":"15","hashOfConfig":"12"},{"size":892,"mtime":1611736317186,"results":"16","hashOfConfig":"12"},{"size":1732,"mtime":1611890566955,"results":"17","hashOfConfig":"12"},{"size":312,"mtime":1611796680025,"results":"18","hashOfConfig":"12"},{"size":1953,"mtime":1611891309288,"results":"19","hashOfConfig":"12"},{"size":1356,"mtime":1611905348084,"results":"20","hashOfConfig":"12"},{"size":1797,"mtime":1612165190890,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"evp0c5",{"filePath":"25","messages":"26","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\fuzzy work\\hooks-study\\src\\index.tsx",[],["47","48"],"D:\\fuzzy work\\hooks-study\\src\\app.tsx",["49","50","51","52","53","54","55","56","57","58"],"import { Console } from 'console';\r\nimport React, { useEffect, useState, useMemo, useRef, useReducer } from 'react'\r\nimport {\r\n    createMemo,\r\n    useToggle,\r\n    useUpdate,\r\n    useGetSet,\r\n    useCounter\r\n} from './hooks'\r\n\r\nexport default function App(props: any) {\r\n    const [value, { inc, dec, get, set, reset }] = useCounter(5);\r\n\r\n    return (\r\n        <div>\r\n            <div>{value} is {get()}</div>\r\n            <button onClick={() => inc()}>Increment</button>\r\n            <button onClick={() => dec()}>Decrement</button>\r\n            <button onClick={() => inc(5)}>Increment (+5)</button>\r\n            <button onClick={() => dec(5)}>Decrement (-5)</button>\r\n            <button onClick={() => set(100)}>Set 100</button>\r\n            <button onClick={() => reset()}>Reset</button>\r\n            <button onClick={() => reset(25)}>Reset (25)</button>\r\n        </div>\r\n    );\r\n}","D:\\fuzzy work\\hooks-study\\src\\hooks\\index.ts",[],"D:\\fuzzy work\\hooks-study\\src\\hooks\\createMemo\\index.ts",["59","60"],"/**\r\n * 钩子（Hook）工厂，接收一个要被记忆的函数，返回一个带有记忆功能的 React 钩子\r\n * 该钩子接收到相同的参数时返回和原始函数相同的结果。\r\n */\r\n\r\nimport { useMemo, FC } from 'react';\r\n\r\nconst createMemo = (fn: FC) => (...args: any) => useMemo(() => fn(args), args)\r\n\r\n\r\n\r\n\r\n\r\nexport default createMemo;","D:\\fuzzy work\\hooks-study\\src\\hooks\\useToggle\\index.ts",[],"D:\\fuzzy work\\hooks-study\\src\\hooks\\useGetset\\index.ts",["61","62"],"D:\\fuzzy work\\hooks-study\\src\\hooks\\useUpdate\\index.ts",[],"D:\\fuzzy work\\hooks-study\\src\\hooks\\useGetSet\\index.ts",["63","64"],"/**\r\n * 问题：如下组件，快速点击时输出的都为0。\r\n * 分析：第一次点击时触发click事件，由于set方法异步执行，函数状态cnt还未改变，不会触发组件重新执行渲染，此时由于快速点击又触发了点击事件，此时点击事件捕获的还是初始state，所以一直输出0。\r\n * 解决方案：不要从state中获取状态和改变状态，从一个ref对象里，获取（get）or 改变（set）状态值，因为 ref 对象是引用值，所以每次 执行 点击事件的时候获取到的都是对象中的新的状态。\r\n * \r\n * export default function App(props: any) {\r\n        const [cnt, set] = useState(0);\r\n        const onClick = () => {\r\n            setTimeout(() => {\r\n                console.log(cnt)\r\n                set(cnt + 1)\r\n            }, 1_000);\r\n        };\r\n\r\n        return (\r\n            <button onClick={onClick}>Clicked: {cnt}</button>\r\n        );\r\n    }\r\n\r\n    useGetSet:\r\n    传入一个你需要控制的状态，\r\n    返回一个它的 get 和 set 方法\r\n */\r\n\r\nimport { useRef, useCallback, useState } from 'react'\r\nimport useUpdate from '../useUpdate'\r\n\r\nconst useGetSet = <T>(initialValue: T): [() => T, (value: T) => void] => {\r\n    const state = useRef(initialValue)\r\n    const update = useUpdate()\r\n    // 使用 useCallback 可以避免在组件重新渲染时再次创建get方法，但是也会使被useCallback包裹的函数捕获第一次创建时组件内的state状态，所以这里要使用useRef，让函数捕获一个引用对象。\r\n    const get = useCallback(() => {\r\n        return state.current\r\n    }, [])\r\n\r\n    const set = useCallback((value: T) => {\r\n        state.current = value\r\n        // 由于没有改变组件的state，不会触发组件的刷新渲染，也就无法触发get（）新数据的需求，所以要手动刷新\r\n        update()\r\n    }, [])\r\n\r\n\r\n    return [get, set];\r\n}\r\n\r\nexport default useGetSet","D:\\fuzzy work\\hooks-study\\src\\hooks\\useCounter\\index.ts",["65","66","67"],"/**\r\n * React 状态钩子，用于追踪数值型值。\r\n * \r\n * 传入：一个数值型值\r\n * 返回一个包含了操作传入值方法的数组 [value, {inc, dec, get, set, reset}] // [值， {加， 减， 取值， 设值， 重置（设置初始值）}]\r\n */\r\n\r\nimport useGetSet from '../useGetSet'\r\nimport { useCallback } from 'react'\r\n\r\n// 数据操作对象类型\r\ninterface CounterActions {\r\n    inc: (value?: number) => void;\r\n    dec: (value?: number) => void;\r\n    get: () => number;\r\n    set: (value: number) => void;\r\n    reset: (value?: number) => void;\r\n}\r\n\r\nconst useCounter = (initialValue: number = 0): [number, CounterActions] => {\r\n    const [get, set] = useGetSet(initialValue)\r\n    const inc = useCallback((value: number = 1) => set(get() + value), []);\r\n    const dec = useCallback((value: number = 1) => set(get() - value), []);\r\n    // 使用 useCallback， 再次渲染时不会再次创建reset方法，usecallback内部的方法捕获了变量 initialValue，所以再次执行 reset 方法（不传参）的时候可以记住上一次传入的值作为 新的 initialValue,从而正确的执行重置操作\r\n    const reset = useCallback((value: number = initialValue) => {\r\n        initialValue = value\r\n        set(value)\r\n    }, [])\r\n\r\n\r\n    return [get(), { inc, dec, get, set, reset }]\r\n}\r\n\r\nexport default useCounter","D:\\fuzzy work\\hooks-study\\src\\hooks\\useList\\index.ts",["68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":10,"nodeType":"75","messageId":"76","endLine":1,"endColumn":17},{"ruleId":"73","severity":1,"message":"77","line":2,"column":17,"nodeType":"75","messageId":"76","endLine":2,"endColumn":26},{"ruleId":"73","severity":1,"message":"78","line":2,"column":28,"nodeType":"75","messageId":"76","endLine":2,"endColumn":36},{"ruleId":"73","severity":1,"message":"79","line":2,"column":38,"nodeType":"75","messageId":"76","endLine":2,"endColumn":45},{"ruleId":"73","severity":1,"message":"80","line":2,"column":47,"nodeType":"75","messageId":"76","endLine":2,"endColumn":53},{"ruleId":"73","severity":1,"message":"81","line":2,"column":55,"nodeType":"75","messageId":"76","endLine":2,"endColumn":65},{"ruleId":"73","severity":1,"message":"82","line":4,"column":5,"nodeType":"75","messageId":"76","endLine":4,"endColumn":15},{"ruleId":"73","severity":1,"message":"83","line":5,"column":5,"nodeType":"75","messageId":"76","endLine":5,"endColumn":14},{"ruleId":"73","severity":1,"message":"84","line":6,"column":5,"nodeType":"75","messageId":"76","endLine":6,"endColumn":14},{"ruleId":"73","severity":1,"message":"85","line":7,"column":5,"nodeType":"75","messageId":"76","endLine":7,"endColumn":14},{"ruleId":"86","severity":1,"message":"87","line":8,"column":74,"nodeType":"75","endLine":8,"endColumn":78},{"ruleId":"86","severity":1,"message":"88","line":8,"column":74,"nodeType":"75","endLine":8,"endColumn":78,"suggestions":"89"},{"ruleId":"73","severity":1,"message":"78","line":24,"column":31,"nodeType":"75","messageId":"76","endLine":24,"endColumn":39},{"ruleId":"86","severity":1,"message":"90","line":40,"column":7,"nodeType":"91","endLine":40,"endColumn":9,"suggestions":"92"},{"ruleId":"73","severity":1,"message":"78","line":25,"column":31,"nodeType":"75","messageId":"76","endLine":25,"endColumn":39},{"ruleId":"86","severity":1,"message":"90","line":40,"column":8,"nodeType":"91","endLine":40,"endColumn":10,"suggestions":"93"},{"ruleId":"86","severity":1,"message":"94","line":22,"column":72,"nodeType":"91","endLine":22,"endColumn":74,"suggestions":"95"},{"ruleId":"86","severity":1,"message":"94","line":23,"column":72,"nodeType":"91","endLine":23,"endColumn":74,"suggestions":"96"},{"ruleId":"86","severity":1,"message":"97","line":26,"column":24,"nodeType":"75","endLine":26,"endColumn":29},{"ruleId":"73","severity":1,"message":"98","line":19,"column":12,"nodeType":"75","messageId":"76","endLine":19,"endColumn":16},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"@typescript-eslint/no-unused-vars","'Console' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'useMemo' is defined but never used.","'useRef' is defined but never used.","'useReducer' is defined but never used.","'createMemo' is defined but never used.","'useToggle' is defined but never used.","'useUpdate' is defined but never used.","'useGetSet' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useMemo has a missing dependency: 'args'. Either include it or remove the dependency array.",["101"],"React Hook useCallback has a missing dependency: 'update'. Either include it or remove the dependency array.","ArrayExpression",["102"],["103"],"React Hook useCallback has missing dependencies: 'get' and 'set'. Either include them or remove the dependency array.",["104"],["105"],"Assignments to the 'initialValue' variable from inside React Hook useCallback will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useCallback.","'list' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"108","fix":"110"},{"desc":"111","fix":"112"},{"desc":"111","fix":"113"},"Update the dependencies array to be: [args]",{"range":"114","text":"115"},"Update the dependencies array to be: [update]",{"range":"116","text":"117"},{"range":"118","text":"117"},"Update the dependencies array to be: [get, set]",{"range":"119","text":"120"},{"range":"121","text":"120"},[203,207],"[args]",[1200,1202],"[update]",[1271,1273],[638,640],"[get, set]",[715,717]]